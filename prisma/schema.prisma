// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
}

model Job {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  companyName           String
  city                  String
  email                 String
  createdAt             DateTime  @default(now())
  jobDetail             JobDetail[]          
}

model JobDetail {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle         String
  jobDescription   String
  jobEducation     String
  jobRequirment    String
  keyPoints        String
  niceToHave       String
  salary           String
  jobId            String
  expires          DateTime?
  categoryId       String
  openingDate     DateTime?  @default(now())
  endDate        DateTime?
  category       Category?      @relation(fields:[categoryId], references: [id])
  job              Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Category {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  job          JobDetail[]
  categoryType CategoryType 
}

enum CategoryType {
  NEWS
  BLOGS
  JOB
}

model VerificationToken {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
